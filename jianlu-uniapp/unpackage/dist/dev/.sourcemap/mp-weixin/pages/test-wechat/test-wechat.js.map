{"version":3,"file":"test-wechat.js","sources":["pages/test-wechat/test-wechat.vue","../../../D/HBuilderX.4.56.2025031210/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvdGVzdC13ZWNoYXQvdGVzdC13ZWNoYXQudnVl"],"sourcesContent":["// 微信登录测试页面\r\n<template>\r\n\t<view class=\"test-container\">\r\n\t\t<view class=\"header\">\r\n\t\t\t<text class=\"title\">微信登录测试</text>\r\n\t\t</view>\r\n\t\t\r\n\t\t<view class=\"test-section\">\r\n\t\t\t<button \r\n\t\t\t\tclass=\"test-btn wechat-btn\" \r\n\t\t\t\t@tap=\"testWechatLogin\"\r\n\t\t\t\t:disabled=\"loading\"\r\n\t\t\t>\r\n\t\t\t\t{{ loading ? '测试中...' : '测试微信登录' }}\r\n\t\t\t</button>\r\n\t\t\t\r\n\t\t\t<button \r\n\t\t\t\tclass=\"test-btn network-btn\" \r\n\t\t\t\t@tap=\"testNetwork\"\r\n\t\t\t\t:disabled=\"loading\"\r\n\t\t\t>\r\n\t\t\t\t{{ loading ? '测试中...' : '测试网络连接' }}\r\n\t\t\t</button>\r\n\t\t\t\r\n\t\t\t<button \r\n\t\t\t\tclass=\"test-btn api-btn\" \r\n\t\t\t\t@tap=\"testApi\"\r\n\t\t\t\t:disabled=\"loading\"\r\n\t\t\t>\r\n\t\t\t\t{{ loading ? '测试中...' : '测试API接口' }}\r\n\t\t\t</button>\r\n\t\t</view>\r\n\t\t\r\n\t\t<view class=\"result-section\">\r\n\t\t\t<text class=\"result-title\">测试结果：</text>\r\n\t\t\t<view class=\"result-content\">\r\n\t\t\t\t<text class=\"result-text\">{{ testResult }}</text>\r\n\t\t\t</view>\r\n\t\t</view>\r\n\t\t\r\n\t\t<view class=\"info-section\">\r\n\t\t\t<text class=\"info-title\">系统信息：</text>\r\n\t\t\t<view class=\"info-content\">\r\n\t\t\t\t<text class=\"info-text\">系统: {{ systemInfo.platform }}</text>\r\n\t\t\t\t<text class=\"info-text\">版本: {{ systemInfo.system }}</text>\r\n\t\t\t\t<text class=\"info-text\">网络: {{ networkStatus.networkType }}</text>\r\n\t\t\t</view>\r\n\t\t</view>\r\n\t</view>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { authApi } from '../../api/index.js'\r\n\r\nconst loading = ref(false)\r\nconst testResult = ref('暂无测试结果')\r\nconst systemInfo = ref({})\r\nconst networkStatus = ref({})\r\n\r\nonMounted(() => {\r\n\t// 获取系统信息\r\n\tsystemInfo.value = uni.getSystemInfoSync()\r\n\t\r\n\t// 获取网络状态\r\n\tuni.getNetworkType({\r\n\t\tsuccess: (res) => {\r\n\t\t\tnetworkStatus.value = res\r\n\t\t}\r\n\t})\r\n})\r\n\r\n// 测试微信登录\r\nconst testWechatLogin = async () => {\r\n\tloading.value = true\r\n\ttestResult.value = '开始测试微信登录...'\r\n\t\r\n\ttry {\r\n\t\t// 检查网络\r\n\t\tconst networkType = await uni.getNetworkType()\r\n\t\tif (networkType.networkType === 'none') {\r\n\t\t\tthrow new Error('网络不可用')\r\n\t\t}\r\n\t\t\r\n\t\ttestResult.value += '\\n网络状态正常'\r\n\t\t\r\n\t\t// 测试微信登录\r\n\t\tconst loginResult = await uni.login({\r\n\t\t\tprovider: 'weixin',\r\n\t\t\tonlyAuthorize: true,\r\n\t\t\ttimeout: 10000\r\n\t\t})\r\n\t\t\r\n\t\tif (loginResult.errMsg !== 'login:ok') {\r\n\t\t\tthrow new Error(`微信登录失败: ${loginResult.errMsg}`)\r\n\t\t}\r\n\t\t\r\n\t\ttestResult.value += '\\n微信授权成功'\r\n\t\ttestResult.value += `\\n获取到code: ${loginResult.code.substring(0, 10)}...`\r\n\t\t\r\n\t\t// 测试后端API\r\n\t\tconst response = await authApi.wechatLogin({ code: loginResult.code })\r\n\t\t\r\n\t\tif (response.success) {\r\n\t\t\ttestResult.value += '\\n后端API调用成功'\r\n\t\t\ttestResult.value += '\\n微信登录功能正常！'\r\n\t\t} else {\r\n\t\t\tthrow new Error(`API响应失败: ${response.message}`)\r\n\t\t}\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error('测试失败:', error)\r\n\t\ttestResult.value += `\\n测试失败: ${error.message || error.errMsg || '未知错误'}`\r\n\t} finally {\r\n\t\tloading.value = false\r\n\t}\r\n}\r\n\r\n// 测试网络连接\r\nconst testNetwork = async () => {\r\n\tloading.value = true\r\n\ttestResult.value = '开始测试网络连接...'\r\n\t\r\n\ttry {\r\n\t\tconst networkType = await uni.getNetworkType()\r\n\t\ttestResult.value += `\\n网络类型: ${networkType.networkType}`\r\n\t\t\r\n\t\tif (networkType.networkType === 'none') {\r\n\t\t\tthrow new Error('网络不可用')\r\n\t\t}\r\n\t\t\r\n\t\t// 测试HTTP请求\r\n\t\tconst response = await uni.request({\r\n\t\t\turl: 'https://www.baidu.com',\r\n\t\t\tmethod: 'GET',\r\n\t\t\ttimeout: 5000\r\n\t\t})\r\n\t\t\r\n\t\ttestResult.value += '\\n网络连接正常'\r\n\t\t\r\n\t} catch (error) {\r\n\t\ttestResult.value += `\\n网络测试失败: ${error.message || error.errMsg}`\r\n\t} finally {\r\n\t\tloading.value = false\r\n\t}\r\n}\r\n\r\n// 测试API接口\r\nconst testApi = async () => {\r\n\tloading.value = true\r\n\ttestResult.value = '开始测试API接口...'\r\n\t\r\n\ttry {\r\n\t\t// 直接测试HTTP请求\r\n\t\ttestResult.value += '\\n1. 测试健康检查接口...'\r\n\t\tconst healthResponse = await uni.request({\r\n\t\t\turl: 'http://192.168.100.4:8081/health',\r\n\t\t\tmethod: 'GET',\r\n\t\t\ttimeout: 5000\r\n\t\t})\r\n\t\t\r\n\t\tif (healthResponse.statusCode === 200) {\r\n\t\t\ttestResult.value += '\\n   健康检查成功'\r\n\t\t} else {\r\n\t\t\tthrow new Error(`健康检查失败: ${healthResponse.statusCode}`)\r\n\t\t}\r\n\t\t\r\n\t\t// 测试微信登录API\r\n\t\ttestResult.value += '\\n2. 测试微信登录API...'\r\n\t\tconst response = await authApi.wechatLogin({ code: 'test_code_123' })\r\n\t\ttestResult.value += '\\n   API调用成功'\r\n\t\ttestResult.value += `\\n   响应数据: ${JSON.stringify(response.data || response, null, 2)}`\r\n\t} catch (error) {\r\n\t\ttestResult.value += `\\nAPI测试失败: ${error.message || error.errMsg || JSON.stringify(error)}`\r\n\t\tconsole.error('API测试详细错误:', error)\r\n\t} finally {\r\n\t\tloading.value = false\r\n\t}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.test-container {\r\n\tpadding: 20px;\r\n\tbackground-color: #f5f5f5;\r\n\tmin-height: 100vh;\r\n}\r\n\r\n.header {\r\n\ttext-align: center;\r\n\tmargin-bottom: 30px;\r\n}\r\n\r\n.title {\r\n\tfont-size: 24px;\r\n\tfont-weight: bold;\r\n\tcolor: #333;\r\n}\r\n\r\n.test-section {\r\n\tmargin-bottom: 30px;\r\n}\r\n\r\n.test-btn {\r\n\twidth: 100%;\r\n\theight: 50px;\r\n\tmargin-bottom: 15px;\r\n\tborder-radius: 8px;\r\n\tfont-size: 16px;\r\n\tcolor: white;\r\n\tborder: none;\r\n}\r\n\r\n.wechat-btn {\r\n\tbackground: linear-gradient(45deg, #07c160, #95ec69);\r\n}\r\n\r\n.network-btn {\r\n\tbackground: linear-gradient(45deg, #1890ff, #69c0ff);\r\n}\r\n\r\n.api-btn {\r\n\tbackground: linear-gradient(45deg, #722ed1, #b37feb);\r\n}\r\n\r\n.test-btn:disabled {\r\n\topacity: 0.6;\r\n}\r\n\r\n.result-section, .info-section {\r\n\tbackground: white;\r\n\tborder-radius: 8px;\r\n\tpadding: 15px;\r\n\tmargin-bottom: 20px;\r\n}\r\n\r\n.result-title, .info-title {\r\n\tfont-size: 18px;\r\n\tfont-weight: bold;\r\n\tcolor: #333;\r\n\tmargin-bottom: 10px;\r\n\tdisplay: block;\r\n}\r\n\r\n.result-content {\r\n\tmin-height: 100px;\r\n\tbackground: #f8f9fa;\r\n\tpadding: 10px;\r\n\tborder-radius: 4px;\r\n}\r\n\r\n.result-text {\r\n\tfont-size: 14px;\r\n\tcolor: #666;\r\n\twhite-space: pre-wrap;\r\n}\r\n\r\n.info-content {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 5px;\r\n}\r\n\r\n.info-text {\r\n\tfont-size: 14px;\r\n\tcolor: #666;\r\n}\r\n</style>","import MiniProgramPage from 'C:/vscode/kirojianlu/jianlu-uniapp/pages/test-wechat/test-wechat.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","onMounted","uni","authApi"],"mappings":"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"}